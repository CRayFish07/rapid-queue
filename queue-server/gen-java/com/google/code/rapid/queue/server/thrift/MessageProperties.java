/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.google.code.rapid.queue.server.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class MessageProperties implements org.apache.thrift.TBase<MessageProperties, MessageProperties._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MessageProperties");

  private static final org.apache.thrift.protocol.TField MESSAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("messageId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PRIORITY_FIELD_DESC = new org.apache.thrift.protocol.TField("priority", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField CONTENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("contentType", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CONTENT_ENCODING_FIELD_DESC = new org.apache.thrift.protocol.TField("contentEncoding", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CONTENT_LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("contentLength", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField EXPIRATION_FIELD_DESC = new org.apache.thrift.protocol.TField("expiration", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField DELIVERY_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("deliveryMode", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField SOURCE_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("sourceIp", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField SOURCE_APP_FIELD_DESC = new org.apache.thrift.protocol.TField("sourceApp", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField SOURCE_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("sourceUser", org.apache.thrift.protocol.TType.STRING, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MessagePropertiesStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MessagePropertiesTupleSchemeFactory());
  }

  public String messageId; // required
  public int priority; // required
  public String contentType; // required
  public String contentEncoding; // required
  public long contentLength; // required
  public long expiration; // required
  public long timestamp; // required
  public int deliveryMode; // required
  public String sourceIp; // required
  public String sourceApp; // required
  public String sourceUser; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MESSAGE_ID((short)1, "messageId"),
    PRIORITY((short)2, "priority"),
    CONTENT_TYPE((short)3, "contentType"),
    CONTENT_ENCODING((short)4, "contentEncoding"),
    CONTENT_LENGTH((short)5, "contentLength"),
    EXPIRATION((short)6, "expiration"),
    TIMESTAMP((short)7, "timestamp"),
    DELIVERY_MODE((short)8, "deliveryMode"),
    SOURCE_IP((short)9, "sourceIp"),
    SOURCE_APP((short)10, "sourceApp"),
    SOURCE_USER((short)11, "sourceUser");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MESSAGE_ID
          return MESSAGE_ID;
        case 2: // PRIORITY
          return PRIORITY;
        case 3: // CONTENT_TYPE
          return CONTENT_TYPE;
        case 4: // CONTENT_ENCODING
          return CONTENT_ENCODING;
        case 5: // CONTENT_LENGTH
          return CONTENT_LENGTH;
        case 6: // EXPIRATION
          return EXPIRATION;
        case 7: // TIMESTAMP
          return TIMESTAMP;
        case 8: // DELIVERY_MODE
          return DELIVERY_MODE;
        case 9: // SOURCE_IP
          return SOURCE_IP;
        case 10: // SOURCE_APP
          return SOURCE_APP;
        case 11: // SOURCE_USER
          return SOURCE_USER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PRIORITY_ISSET_ID = 0;
  private static final int __CONTENTLENGTH_ISSET_ID = 1;
  private static final int __EXPIRATION_ISSET_ID = 2;
  private static final int __TIMESTAMP_ISSET_ID = 3;
  private static final int __DELIVERYMODE_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MESSAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("messageId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRIORITY, new org.apache.thrift.meta_data.FieldMetaData("priority", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CONTENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("contentType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTENT_ENCODING, new org.apache.thrift.meta_data.FieldMetaData("contentEncoding", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTENT_LENGTH, new org.apache.thrift.meta_data.FieldMetaData("contentLength", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.EXPIRATION, new org.apache.thrift.meta_data.FieldMetaData("expiration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DELIVERY_MODE, new org.apache.thrift.meta_data.FieldMetaData("deliveryMode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SOURCE_IP, new org.apache.thrift.meta_data.FieldMetaData("sourceIp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SOURCE_APP, new org.apache.thrift.meta_data.FieldMetaData("sourceApp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SOURCE_USER, new org.apache.thrift.meta_data.FieldMetaData("sourceUser", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MessageProperties.class, metaDataMap);
  }

  public MessageProperties() {
  }

  public MessageProperties(
    String messageId,
    int priority,
    String contentType,
    String contentEncoding,
    long contentLength,
    long expiration,
    long timestamp,
    int deliveryMode,
    String sourceIp,
    String sourceApp,
    String sourceUser)
  {
    this();
    this.messageId = messageId;
    this.priority = priority;
    setPriorityIsSet(true);
    this.contentType = contentType;
    this.contentEncoding = contentEncoding;
    this.contentLength = contentLength;
    setContentLengthIsSet(true);
    this.expiration = expiration;
    setExpirationIsSet(true);
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    this.deliveryMode = deliveryMode;
    setDeliveryModeIsSet(true);
    this.sourceIp = sourceIp;
    this.sourceApp = sourceApp;
    this.sourceUser = sourceUser;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MessageProperties(MessageProperties other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetMessageId()) {
      this.messageId = other.messageId;
    }
    this.priority = other.priority;
    if (other.isSetContentType()) {
      this.contentType = other.contentType;
    }
    if (other.isSetContentEncoding()) {
      this.contentEncoding = other.contentEncoding;
    }
    this.contentLength = other.contentLength;
    this.expiration = other.expiration;
    this.timestamp = other.timestamp;
    this.deliveryMode = other.deliveryMode;
    if (other.isSetSourceIp()) {
      this.sourceIp = other.sourceIp;
    }
    if (other.isSetSourceApp()) {
      this.sourceApp = other.sourceApp;
    }
    if (other.isSetSourceUser()) {
      this.sourceUser = other.sourceUser;
    }
  }

  public MessageProperties deepCopy() {
    return new MessageProperties(this);
  }

  @Override
  public void clear() {
    this.messageId = null;
    setPriorityIsSet(false);
    this.priority = 0;
    this.contentType = null;
    this.contentEncoding = null;
    setContentLengthIsSet(false);
    this.contentLength = 0;
    setExpirationIsSet(false);
    this.expiration = 0;
    setTimestampIsSet(false);
    this.timestamp = 0;
    setDeliveryModeIsSet(false);
    this.deliveryMode = 0;
    this.sourceIp = null;
    this.sourceApp = null;
    this.sourceUser = null;
  }

  public String getMessageId() {
    return this.messageId;
  }

  public MessageProperties setMessageId(String messageId) {
    this.messageId = messageId;
    return this;
  }

  public void unsetMessageId() {
    this.messageId = null;
  }

  /** Returns true if field messageId is set (has been assigned a value) and false otherwise */
  public boolean isSetMessageId() {
    return this.messageId != null;
  }

  public void setMessageIdIsSet(boolean value) {
    if (!value) {
      this.messageId = null;
    }
  }

  public int getPriority() {
    return this.priority;
  }

  public MessageProperties setPriority(int priority) {
    this.priority = priority;
    setPriorityIsSet(true);
    return this;
  }

  public void unsetPriority() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRIORITY_ISSET_ID);
  }

  /** Returns true if field priority is set (has been assigned a value) and false otherwise */
  public boolean isSetPriority() {
    return EncodingUtils.testBit(__isset_bitfield, __PRIORITY_ISSET_ID);
  }

  public void setPriorityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRIORITY_ISSET_ID, value);
  }

  public String getContentType() {
    return this.contentType;
  }

  public MessageProperties setContentType(String contentType) {
    this.contentType = contentType;
    return this;
  }

  public void unsetContentType() {
    this.contentType = null;
  }

  /** Returns true if field contentType is set (has been assigned a value) and false otherwise */
  public boolean isSetContentType() {
    return this.contentType != null;
  }

  public void setContentTypeIsSet(boolean value) {
    if (!value) {
      this.contentType = null;
    }
  }

  public String getContentEncoding() {
    return this.contentEncoding;
  }

  public MessageProperties setContentEncoding(String contentEncoding) {
    this.contentEncoding = contentEncoding;
    return this;
  }

  public void unsetContentEncoding() {
    this.contentEncoding = null;
  }

  /** Returns true if field contentEncoding is set (has been assigned a value) and false otherwise */
  public boolean isSetContentEncoding() {
    return this.contentEncoding != null;
  }

  public void setContentEncodingIsSet(boolean value) {
    if (!value) {
      this.contentEncoding = null;
    }
  }

  public long getContentLength() {
    return this.contentLength;
  }

  public MessageProperties setContentLength(long contentLength) {
    this.contentLength = contentLength;
    setContentLengthIsSet(true);
    return this;
  }

  public void unsetContentLength() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONTENTLENGTH_ISSET_ID);
  }

  /** Returns true if field contentLength is set (has been assigned a value) and false otherwise */
  public boolean isSetContentLength() {
    return EncodingUtils.testBit(__isset_bitfield, __CONTENTLENGTH_ISSET_ID);
  }

  public void setContentLengthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONTENTLENGTH_ISSET_ID, value);
  }

  public long getExpiration() {
    return this.expiration;
  }

  public MessageProperties setExpiration(long expiration) {
    this.expiration = expiration;
    setExpirationIsSet(true);
    return this;
  }

  public void unsetExpiration() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXPIRATION_ISSET_ID);
  }

  /** Returns true if field expiration is set (has been assigned a value) and false otherwise */
  public boolean isSetExpiration() {
    return EncodingUtils.testBit(__isset_bitfield, __EXPIRATION_ISSET_ID);
  }

  public void setExpirationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXPIRATION_ISSET_ID, value);
  }

  public long getTimestamp() {
    return this.timestamp;
  }

  public MessageProperties setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    return this;
  }

  public void unsetTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
  }

  public int getDeliveryMode() {
    return this.deliveryMode;
  }

  public MessageProperties setDeliveryMode(int deliveryMode) {
    this.deliveryMode = deliveryMode;
    setDeliveryModeIsSet(true);
    return this;
  }

  public void unsetDeliveryMode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DELIVERYMODE_ISSET_ID);
  }

  /** Returns true if field deliveryMode is set (has been assigned a value) and false otherwise */
  public boolean isSetDeliveryMode() {
    return EncodingUtils.testBit(__isset_bitfield, __DELIVERYMODE_ISSET_ID);
  }

  public void setDeliveryModeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DELIVERYMODE_ISSET_ID, value);
  }

  public String getSourceIp() {
    return this.sourceIp;
  }

  public MessageProperties setSourceIp(String sourceIp) {
    this.sourceIp = sourceIp;
    return this;
  }

  public void unsetSourceIp() {
    this.sourceIp = null;
  }

  /** Returns true if field sourceIp is set (has been assigned a value) and false otherwise */
  public boolean isSetSourceIp() {
    return this.sourceIp != null;
  }

  public void setSourceIpIsSet(boolean value) {
    if (!value) {
      this.sourceIp = null;
    }
  }

  public String getSourceApp() {
    return this.sourceApp;
  }

  public MessageProperties setSourceApp(String sourceApp) {
    this.sourceApp = sourceApp;
    return this;
  }

  public void unsetSourceApp() {
    this.sourceApp = null;
  }

  /** Returns true if field sourceApp is set (has been assigned a value) and false otherwise */
  public boolean isSetSourceApp() {
    return this.sourceApp != null;
  }

  public void setSourceAppIsSet(boolean value) {
    if (!value) {
      this.sourceApp = null;
    }
  }

  public String getSourceUser() {
    return this.sourceUser;
  }

  public MessageProperties setSourceUser(String sourceUser) {
    this.sourceUser = sourceUser;
    return this;
  }

  public void unsetSourceUser() {
    this.sourceUser = null;
  }

  /** Returns true if field sourceUser is set (has been assigned a value) and false otherwise */
  public boolean isSetSourceUser() {
    return this.sourceUser != null;
  }

  public void setSourceUserIsSet(boolean value) {
    if (!value) {
      this.sourceUser = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MESSAGE_ID:
      if (value == null) {
        unsetMessageId();
      } else {
        setMessageId((String)value);
      }
      break;

    case PRIORITY:
      if (value == null) {
        unsetPriority();
      } else {
        setPriority((Integer)value);
      }
      break;

    case CONTENT_TYPE:
      if (value == null) {
        unsetContentType();
      } else {
        setContentType((String)value);
      }
      break;

    case CONTENT_ENCODING:
      if (value == null) {
        unsetContentEncoding();
      } else {
        setContentEncoding((String)value);
      }
      break;

    case CONTENT_LENGTH:
      if (value == null) {
        unsetContentLength();
      } else {
        setContentLength((Long)value);
      }
      break;

    case EXPIRATION:
      if (value == null) {
        unsetExpiration();
      } else {
        setExpiration((Long)value);
      }
      break;

    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((Long)value);
      }
      break;

    case DELIVERY_MODE:
      if (value == null) {
        unsetDeliveryMode();
      } else {
        setDeliveryMode((Integer)value);
      }
      break;

    case SOURCE_IP:
      if (value == null) {
        unsetSourceIp();
      } else {
        setSourceIp((String)value);
      }
      break;

    case SOURCE_APP:
      if (value == null) {
        unsetSourceApp();
      } else {
        setSourceApp((String)value);
      }
      break;

    case SOURCE_USER:
      if (value == null) {
        unsetSourceUser();
      } else {
        setSourceUser((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MESSAGE_ID:
      return getMessageId();

    case PRIORITY:
      return Integer.valueOf(getPriority());

    case CONTENT_TYPE:
      return getContentType();

    case CONTENT_ENCODING:
      return getContentEncoding();

    case CONTENT_LENGTH:
      return Long.valueOf(getContentLength());

    case EXPIRATION:
      return Long.valueOf(getExpiration());

    case TIMESTAMP:
      return Long.valueOf(getTimestamp());

    case DELIVERY_MODE:
      return Integer.valueOf(getDeliveryMode());

    case SOURCE_IP:
      return getSourceIp();

    case SOURCE_APP:
      return getSourceApp();

    case SOURCE_USER:
      return getSourceUser();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MESSAGE_ID:
      return isSetMessageId();
    case PRIORITY:
      return isSetPriority();
    case CONTENT_TYPE:
      return isSetContentType();
    case CONTENT_ENCODING:
      return isSetContentEncoding();
    case CONTENT_LENGTH:
      return isSetContentLength();
    case EXPIRATION:
      return isSetExpiration();
    case TIMESTAMP:
      return isSetTimestamp();
    case DELIVERY_MODE:
      return isSetDeliveryMode();
    case SOURCE_IP:
      return isSetSourceIp();
    case SOURCE_APP:
      return isSetSourceApp();
    case SOURCE_USER:
      return isSetSourceUser();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MessageProperties)
      return this.equals((MessageProperties)that);
    return false;
  }

  public boolean equals(MessageProperties that) {
    if (that == null)
      return false;

    boolean this_present_messageId = true && this.isSetMessageId();
    boolean that_present_messageId = true && that.isSetMessageId();
    if (this_present_messageId || that_present_messageId) {
      if (!(this_present_messageId && that_present_messageId))
        return false;
      if (!this.messageId.equals(that.messageId))
        return false;
    }

    boolean this_present_priority = true;
    boolean that_present_priority = true;
    if (this_present_priority || that_present_priority) {
      if (!(this_present_priority && that_present_priority))
        return false;
      if (this.priority != that.priority)
        return false;
    }

    boolean this_present_contentType = true && this.isSetContentType();
    boolean that_present_contentType = true && that.isSetContentType();
    if (this_present_contentType || that_present_contentType) {
      if (!(this_present_contentType && that_present_contentType))
        return false;
      if (!this.contentType.equals(that.contentType))
        return false;
    }

    boolean this_present_contentEncoding = true && this.isSetContentEncoding();
    boolean that_present_contentEncoding = true && that.isSetContentEncoding();
    if (this_present_contentEncoding || that_present_contentEncoding) {
      if (!(this_present_contentEncoding && that_present_contentEncoding))
        return false;
      if (!this.contentEncoding.equals(that.contentEncoding))
        return false;
    }

    boolean this_present_contentLength = true;
    boolean that_present_contentLength = true;
    if (this_present_contentLength || that_present_contentLength) {
      if (!(this_present_contentLength && that_present_contentLength))
        return false;
      if (this.contentLength != that.contentLength)
        return false;
    }

    boolean this_present_expiration = true;
    boolean that_present_expiration = true;
    if (this_present_expiration || that_present_expiration) {
      if (!(this_present_expiration && that_present_expiration))
        return false;
      if (this.expiration != that.expiration)
        return false;
    }

    boolean this_present_timestamp = true;
    boolean that_present_timestamp = true;
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    boolean this_present_deliveryMode = true;
    boolean that_present_deliveryMode = true;
    if (this_present_deliveryMode || that_present_deliveryMode) {
      if (!(this_present_deliveryMode && that_present_deliveryMode))
        return false;
      if (this.deliveryMode != that.deliveryMode)
        return false;
    }

    boolean this_present_sourceIp = true && this.isSetSourceIp();
    boolean that_present_sourceIp = true && that.isSetSourceIp();
    if (this_present_sourceIp || that_present_sourceIp) {
      if (!(this_present_sourceIp && that_present_sourceIp))
        return false;
      if (!this.sourceIp.equals(that.sourceIp))
        return false;
    }

    boolean this_present_sourceApp = true && this.isSetSourceApp();
    boolean that_present_sourceApp = true && that.isSetSourceApp();
    if (this_present_sourceApp || that_present_sourceApp) {
      if (!(this_present_sourceApp && that_present_sourceApp))
        return false;
      if (!this.sourceApp.equals(that.sourceApp))
        return false;
    }

    boolean this_present_sourceUser = true && this.isSetSourceUser();
    boolean that_present_sourceUser = true && that.isSetSourceUser();
    if (this_present_sourceUser || that_present_sourceUser) {
      if (!(this_present_sourceUser && that_present_sourceUser))
        return false;
      if (!this.sourceUser.equals(that.sourceUser))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(MessageProperties other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    MessageProperties typedOther = (MessageProperties)other;

    lastComparison = Boolean.valueOf(isSetMessageId()).compareTo(typedOther.isSetMessageId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessageId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageId, typedOther.messageId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPriority()).compareTo(typedOther.isSetPriority());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPriority()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priority, typedOther.priority);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContentType()).compareTo(typedOther.isSetContentType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContentType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contentType, typedOther.contentType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContentEncoding()).compareTo(typedOther.isSetContentEncoding());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContentEncoding()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contentEncoding, typedOther.contentEncoding);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContentLength()).compareTo(typedOther.isSetContentLength());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContentLength()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contentLength, typedOther.contentLength);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExpiration()).compareTo(typedOther.isSetExpiration());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpiration()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expiration, typedOther.expiration);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(typedOther.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, typedOther.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeliveryMode()).compareTo(typedOther.isSetDeliveryMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeliveryMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deliveryMode, typedOther.deliveryMode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSourceIp()).compareTo(typedOther.isSetSourceIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSourceIp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceIp, typedOther.sourceIp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSourceApp()).compareTo(typedOther.isSetSourceApp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSourceApp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceApp, typedOther.sourceApp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSourceUser()).compareTo(typedOther.isSetSourceUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSourceUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceUser, typedOther.sourceUser);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MessageProperties(");
    boolean first = true;

    sb.append("messageId:");
    if (this.messageId == null) {
      sb.append("null");
    } else {
      sb.append(this.messageId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("priority:");
    sb.append(this.priority);
    first = false;
    if (!first) sb.append(", ");
    sb.append("contentType:");
    if (this.contentType == null) {
      sb.append("null");
    } else {
      sb.append(this.contentType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contentEncoding:");
    if (this.contentEncoding == null) {
      sb.append("null");
    } else {
      sb.append(this.contentEncoding);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contentLength:");
    sb.append(this.contentLength);
    first = false;
    if (!first) sb.append(", ");
    sb.append("expiration:");
    sb.append(this.expiration);
    first = false;
    if (!first) sb.append(", ");
    sb.append("timestamp:");
    sb.append(this.timestamp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("deliveryMode:");
    sb.append(this.deliveryMode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sourceIp:");
    if (this.sourceIp == null) {
      sb.append("null");
    } else {
      sb.append(this.sourceIp);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sourceApp:");
    if (this.sourceApp == null) {
      sb.append("null");
    } else {
      sb.append(this.sourceApp);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sourceUser:");
    if (this.sourceUser == null) {
      sb.append("null");
    } else {
      sb.append(this.sourceUser);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MessagePropertiesStandardSchemeFactory implements SchemeFactory {
    public MessagePropertiesStandardScheme getScheme() {
      return new MessagePropertiesStandardScheme();
    }
  }

  private static class MessagePropertiesStandardScheme extends StandardScheme<MessageProperties> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MessageProperties struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MESSAGE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.messageId = iprot.readString();
              struct.setMessageIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PRIORITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.priority = iprot.readI32();
              struct.setPriorityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CONTENT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contentType = iprot.readString();
              struct.setContentTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CONTENT_ENCODING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contentEncoding = iprot.readString();
              struct.setContentEncodingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CONTENT_LENGTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.contentLength = iprot.readI64();
              struct.setContentLengthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // EXPIRATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.expiration = iprot.readI64();
              struct.setExpirationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timestamp = iprot.readI64();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DELIVERY_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.deliveryMode = iprot.readI32();
              struct.setDeliveryModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SOURCE_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sourceIp = iprot.readString();
              struct.setSourceIpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SOURCE_APP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sourceApp = iprot.readString();
              struct.setSourceAppIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SOURCE_USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sourceUser = iprot.readString();
              struct.setSourceUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MessageProperties struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.messageId != null) {
        oprot.writeFieldBegin(MESSAGE_ID_FIELD_DESC);
        oprot.writeString(struct.messageId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PRIORITY_FIELD_DESC);
      oprot.writeI32(struct.priority);
      oprot.writeFieldEnd();
      if (struct.contentType != null) {
        oprot.writeFieldBegin(CONTENT_TYPE_FIELD_DESC);
        oprot.writeString(struct.contentType);
        oprot.writeFieldEnd();
      }
      if (struct.contentEncoding != null) {
        oprot.writeFieldBegin(CONTENT_ENCODING_FIELD_DESC);
        oprot.writeString(struct.contentEncoding);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CONTENT_LENGTH_FIELD_DESC);
      oprot.writeI64(struct.contentLength);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXPIRATION_FIELD_DESC);
      oprot.writeI64(struct.expiration);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
      oprot.writeI64(struct.timestamp);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DELIVERY_MODE_FIELD_DESC);
      oprot.writeI32(struct.deliveryMode);
      oprot.writeFieldEnd();
      if (struct.sourceIp != null) {
        oprot.writeFieldBegin(SOURCE_IP_FIELD_DESC);
        oprot.writeString(struct.sourceIp);
        oprot.writeFieldEnd();
      }
      if (struct.sourceApp != null) {
        oprot.writeFieldBegin(SOURCE_APP_FIELD_DESC);
        oprot.writeString(struct.sourceApp);
        oprot.writeFieldEnd();
      }
      if (struct.sourceUser != null) {
        oprot.writeFieldBegin(SOURCE_USER_FIELD_DESC);
        oprot.writeString(struct.sourceUser);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MessagePropertiesTupleSchemeFactory implements SchemeFactory {
    public MessagePropertiesTupleScheme getScheme() {
      return new MessagePropertiesTupleScheme();
    }
  }

  private static class MessagePropertiesTupleScheme extends TupleScheme<MessageProperties> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MessageProperties struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMessageId()) {
        optionals.set(0);
      }
      if (struct.isSetPriority()) {
        optionals.set(1);
      }
      if (struct.isSetContentType()) {
        optionals.set(2);
      }
      if (struct.isSetContentEncoding()) {
        optionals.set(3);
      }
      if (struct.isSetContentLength()) {
        optionals.set(4);
      }
      if (struct.isSetExpiration()) {
        optionals.set(5);
      }
      if (struct.isSetTimestamp()) {
        optionals.set(6);
      }
      if (struct.isSetDeliveryMode()) {
        optionals.set(7);
      }
      if (struct.isSetSourceIp()) {
        optionals.set(8);
      }
      if (struct.isSetSourceApp()) {
        optionals.set(9);
      }
      if (struct.isSetSourceUser()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetMessageId()) {
        oprot.writeString(struct.messageId);
      }
      if (struct.isSetPriority()) {
        oprot.writeI32(struct.priority);
      }
      if (struct.isSetContentType()) {
        oprot.writeString(struct.contentType);
      }
      if (struct.isSetContentEncoding()) {
        oprot.writeString(struct.contentEncoding);
      }
      if (struct.isSetContentLength()) {
        oprot.writeI64(struct.contentLength);
      }
      if (struct.isSetExpiration()) {
        oprot.writeI64(struct.expiration);
      }
      if (struct.isSetTimestamp()) {
        oprot.writeI64(struct.timestamp);
      }
      if (struct.isSetDeliveryMode()) {
        oprot.writeI32(struct.deliveryMode);
      }
      if (struct.isSetSourceIp()) {
        oprot.writeString(struct.sourceIp);
      }
      if (struct.isSetSourceApp()) {
        oprot.writeString(struct.sourceApp);
      }
      if (struct.isSetSourceUser()) {
        oprot.writeString(struct.sourceUser);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MessageProperties struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.messageId = iprot.readString();
        struct.setMessageIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.priority = iprot.readI32();
        struct.setPriorityIsSet(true);
      }
      if (incoming.get(2)) {
        struct.contentType = iprot.readString();
        struct.setContentTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.contentEncoding = iprot.readString();
        struct.setContentEncodingIsSet(true);
      }
      if (incoming.get(4)) {
        struct.contentLength = iprot.readI64();
        struct.setContentLengthIsSet(true);
      }
      if (incoming.get(5)) {
        struct.expiration = iprot.readI64();
        struct.setExpirationIsSet(true);
      }
      if (incoming.get(6)) {
        struct.timestamp = iprot.readI64();
        struct.setTimestampIsSet(true);
      }
      if (incoming.get(7)) {
        struct.deliveryMode = iprot.readI32();
        struct.setDeliveryModeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.sourceIp = iprot.readString();
        struct.setSourceIpIsSet(true);
      }
      if (incoming.get(9)) {
        struct.sourceApp = iprot.readString();
        struct.setSourceAppIsSet(true);
      }
      if (incoming.get(10)) {
        struct.sourceUser = iprot.readString();
        struct.setSourceUserIsSet(true);
      }
    }
  }

}

