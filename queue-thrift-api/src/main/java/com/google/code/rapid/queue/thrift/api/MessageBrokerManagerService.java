/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.google.code.rapid.queue.thrift.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class MessageBrokerManagerService {

  /**
   * MessageBroker管理接口
   */
  public interface Iface {

    public void queueAdd(String queueName) throws org.apache.thrift.TException;

    public void queueDelete(String queueName) throws org.apache.thrift.TException;

    public void queueClear(String queueName) throws org.apache.thrift.TException;

    public void queueUnbindAllExchange(String queueName) throws org.apache.thrift.TException;

    public void queueBind(String exchangeName, String queueName, String routerKey) throws org.apache.thrift.TException;

    public void queueUnbindByRouterKey(String exchangeName, String queueName, String routerKey) throws org.apache.thrift.TException;

    public void queueUnbind(String exchangeName, String queueName) throws org.apache.thrift.TException;

    public void exchangeAdd(String exchange) throws org.apache.thrift.TException;

    public void exchangeDelete(String exchangeName) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void queueAdd(String queueName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.queueAdd_call> resultHandler) throws org.apache.thrift.TException;

    public void queueDelete(String queueName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.queueDelete_call> resultHandler) throws org.apache.thrift.TException;

    public void queueClear(String queueName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.queueClear_call> resultHandler) throws org.apache.thrift.TException;

    public void queueUnbindAllExchange(String queueName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.queueUnbindAllExchange_call> resultHandler) throws org.apache.thrift.TException;

    public void queueBind(String exchangeName, String queueName, String routerKey, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.queueBind_call> resultHandler) throws org.apache.thrift.TException;

    public void queueUnbindByRouterKey(String exchangeName, String queueName, String routerKey, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.queueUnbindByRouterKey_call> resultHandler) throws org.apache.thrift.TException;

    public void queueUnbind(String exchangeName, String queueName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.queueUnbind_call> resultHandler) throws org.apache.thrift.TException;

    public void exchangeAdd(String exchange, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.exchangeAdd_call> resultHandler) throws org.apache.thrift.TException;

    public void exchangeDelete(String exchangeName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.exchangeDelete_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void queueAdd(String queueName) throws org.apache.thrift.TException
    {
      send_queueAdd(queueName);
      recv_queueAdd();
    }

    public void send_queueAdd(String queueName) throws org.apache.thrift.TException
    {
      queueAdd_args args = new queueAdd_args();
      args.setQueueName(queueName);
      sendBase("queueAdd", args);
    }

    public void recv_queueAdd() throws org.apache.thrift.TException
    {
      queueAdd_result result = new queueAdd_result();
      receiveBase(result, "queueAdd");
      return;
    }

    public void queueDelete(String queueName) throws org.apache.thrift.TException
    {
      send_queueDelete(queueName);
      recv_queueDelete();
    }

    public void send_queueDelete(String queueName) throws org.apache.thrift.TException
    {
      queueDelete_args args = new queueDelete_args();
      args.setQueueName(queueName);
      sendBase("queueDelete", args);
    }

    public void recv_queueDelete() throws org.apache.thrift.TException
    {
      queueDelete_result result = new queueDelete_result();
      receiveBase(result, "queueDelete");
      return;
    }

    public void queueClear(String queueName) throws org.apache.thrift.TException
    {
      send_queueClear(queueName);
      recv_queueClear();
    }

    public void send_queueClear(String queueName) throws org.apache.thrift.TException
    {
      queueClear_args args = new queueClear_args();
      args.setQueueName(queueName);
      sendBase("queueClear", args);
    }

    public void recv_queueClear() throws org.apache.thrift.TException
    {
      queueClear_result result = new queueClear_result();
      receiveBase(result, "queueClear");
      return;
    }

    public void queueUnbindAllExchange(String queueName) throws org.apache.thrift.TException
    {
      send_queueUnbindAllExchange(queueName);
      recv_queueUnbindAllExchange();
    }

    public void send_queueUnbindAllExchange(String queueName) throws org.apache.thrift.TException
    {
      queueUnbindAllExchange_args args = new queueUnbindAllExchange_args();
      args.setQueueName(queueName);
      sendBase("queueUnbindAllExchange", args);
    }

    public void recv_queueUnbindAllExchange() throws org.apache.thrift.TException
    {
      queueUnbindAllExchange_result result = new queueUnbindAllExchange_result();
      receiveBase(result, "queueUnbindAllExchange");
      return;
    }

    public void queueBind(String exchangeName, String queueName, String routerKey) throws org.apache.thrift.TException
    {
      send_queueBind(exchangeName, queueName, routerKey);
      recv_queueBind();
    }

    public void send_queueBind(String exchangeName, String queueName, String routerKey) throws org.apache.thrift.TException
    {
      queueBind_args args = new queueBind_args();
      args.setExchangeName(exchangeName);
      args.setQueueName(queueName);
      args.setRouterKey(routerKey);
      sendBase("queueBind", args);
    }

    public void recv_queueBind() throws org.apache.thrift.TException
    {
      queueBind_result result = new queueBind_result();
      receiveBase(result, "queueBind");
      return;
    }

    public void queueUnbindByRouterKey(String exchangeName, String queueName, String routerKey) throws org.apache.thrift.TException
    {
      send_queueUnbindByRouterKey(exchangeName, queueName, routerKey);
      recv_queueUnbindByRouterKey();
    }

    public void send_queueUnbindByRouterKey(String exchangeName, String queueName, String routerKey) throws org.apache.thrift.TException
    {
      queueUnbindByRouterKey_args args = new queueUnbindByRouterKey_args();
      args.setExchangeName(exchangeName);
      args.setQueueName(queueName);
      args.setRouterKey(routerKey);
      sendBase("queueUnbindByRouterKey", args);
    }

    public void recv_queueUnbindByRouterKey() throws org.apache.thrift.TException
    {
      queueUnbindByRouterKey_result result = new queueUnbindByRouterKey_result();
      receiveBase(result, "queueUnbindByRouterKey");
      return;
    }

    public void queueUnbind(String exchangeName, String queueName) throws org.apache.thrift.TException
    {
      send_queueUnbind(exchangeName, queueName);
      recv_queueUnbind();
    }

    public void send_queueUnbind(String exchangeName, String queueName) throws org.apache.thrift.TException
    {
      queueUnbind_args args = new queueUnbind_args();
      args.setExchangeName(exchangeName);
      args.setQueueName(queueName);
      sendBase("queueUnbind", args);
    }

    public void recv_queueUnbind() throws org.apache.thrift.TException
    {
      queueUnbind_result result = new queueUnbind_result();
      receiveBase(result, "queueUnbind");
      return;
    }

    public void exchangeAdd(String exchange) throws org.apache.thrift.TException
    {
      send_exchangeAdd(exchange);
      recv_exchangeAdd();
    }

    public void send_exchangeAdd(String exchange) throws org.apache.thrift.TException
    {
      exchangeAdd_args args = new exchangeAdd_args();
      args.setExchange(exchange);
      sendBase("exchangeAdd", args);
    }

    public void recv_exchangeAdd() throws org.apache.thrift.TException
    {
      exchangeAdd_result result = new exchangeAdd_result();
      receiveBase(result, "exchangeAdd");
      return;
    }

    public void exchangeDelete(String exchangeName) throws org.apache.thrift.TException
    {
      send_exchangeDelete(exchangeName);
      recv_exchangeDelete();
    }

    public void send_exchangeDelete(String exchangeName) throws org.apache.thrift.TException
    {
      exchangeDelete_args args = new exchangeDelete_args();
      args.setExchangeName(exchangeName);
      sendBase("exchangeDelete", args);
    }

    public void recv_exchangeDelete() throws org.apache.thrift.TException
    {
      exchangeDelete_result result = new exchangeDelete_result();
      receiveBase(result, "exchangeDelete");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void queueAdd(String queueName, org.apache.thrift.async.AsyncMethodCallback<queueAdd_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queueAdd_call method_call = new queueAdd_call(queueName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queueAdd_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String queueName;
      public queueAdd_call(String queueName, org.apache.thrift.async.AsyncMethodCallback<queueAdd_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.queueName = queueName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queueAdd", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queueAdd_args args = new queueAdd_args();
        args.setQueueName(queueName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_queueAdd();
      }
    }

    public void queueDelete(String queueName, org.apache.thrift.async.AsyncMethodCallback<queueDelete_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queueDelete_call method_call = new queueDelete_call(queueName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queueDelete_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String queueName;
      public queueDelete_call(String queueName, org.apache.thrift.async.AsyncMethodCallback<queueDelete_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.queueName = queueName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queueDelete", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queueDelete_args args = new queueDelete_args();
        args.setQueueName(queueName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_queueDelete();
      }
    }

    public void queueClear(String queueName, org.apache.thrift.async.AsyncMethodCallback<queueClear_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queueClear_call method_call = new queueClear_call(queueName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queueClear_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String queueName;
      public queueClear_call(String queueName, org.apache.thrift.async.AsyncMethodCallback<queueClear_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.queueName = queueName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queueClear", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queueClear_args args = new queueClear_args();
        args.setQueueName(queueName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_queueClear();
      }
    }

    public void queueUnbindAllExchange(String queueName, org.apache.thrift.async.AsyncMethodCallback<queueUnbindAllExchange_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queueUnbindAllExchange_call method_call = new queueUnbindAllExchange_call(queueName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queueUnbindAllExchange_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String queueName;
      public queueUnbindAllExchange_call(String queueName, org.apache.thrift.async.AsyncMethodCallback<queueUnbindAllExchange_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.queueName = queueName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queueUnbindAllExchange", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queueUnbindAllExchange_args args = new queueUnbindAllExchange_args();
        args.setQueueName(queueName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_queueUnbindAllExchange();
      }
    }

    public void queueBind(String exchangeName, String queueName, String routerKey, org.apache.thrift.async.AsyncMethodCallback<queueBind_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queueBind_call method_call = new queueBind_call(exchangeName, queueName, routerKey, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queueBind_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String exchangeName;
      private String queueName;
      private String routerKey;
      public queueBind_call(String exchangeName, String queueName, String routerKey, org.apache.thrift.async.AsyncMethodCallback<queueBind_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.exchangeName = exchangeName;
        this.queueName = queueName;
        this.routerKey = routerKey;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queueBind", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queueBind_args args = new queueBind_args();
        args.setExchangeName(exchangeName);
        args.setQueueName(queueName);
        args.setRouterKey(routerKey);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_queueBind();
      }
    }

    public void queueUnbindByRouterKey(String exchangeName, String queueName, String routerKey, org.apache.thrift.async.AsyncMethodCallback<queueUnbindByRouterKey_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queueUnbindByRouterKey_call method_call = new queueUnbindByRouterKey_call(exchangeName, queueName, routerKey, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queueUnbindByRouterKey_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String exchangeName;
      private String queueName;
      private String routerKey;
      public queueUnbindByRouterKey_call(String exchangeName, String queueName, String routerKey, org.apache.thrift.async.AsyncMethodCallback<queueUnbindByRouterKey_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.exchangeName = exchangeName;
        this.queueName = queueName;
        this.routerKey = routerKey;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queueUnbindByRouterKey", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queueUnbindByRouterKey_args args = new queueUnbindByRouterKey_args();
        args.setExchangeName(exchangeName);
        args.setQueueName(queueName);
        args.setRouterKey(routerKey);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_queueUnbindByRouterKey();
      }
    }

    public void queueUnbind(String exchangeName, String queueName, org.apache.thrift.async.AsyncMethodCallback<queueUnbind_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queueUnbind_call method_call = new queueUnbind_call(exchangeName, queueName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queueUnbind_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String exchangeName;
      private String queueName;
      public queueUnbind_call(String exchangeName, String queueName, org.apache.thrift.async.AsyncMethodCallback<queueUnbind_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.exchangeName = exchangeName;
        this.queueName = queueName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queueUnbind", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queueUnbind_args args = new queueUnbind_args();
        args.setExchangeName(exchangeName);
        args.setQueueName(queueName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_queueUnbind();
      }
    }

    public void exchangeAdd(String exchange, org.apache.thrift.async.AsyncMethodCallback<exchangeAdd_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      exchangeAdd_call method_call = new exchangeAdd_call(exchange, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class exchangeAdd_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String exchange;
      public exchangeAdd_call(String exchange, org.apache.thrift.async.AsyncMethodCallback<exchangeAdd_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.exchange = exchange;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("exchangeAdd", org.apache.thrift.protocol.TMessageType.CALL, 0));
        exchangeAdd_args args = new exchangeAdd_args();
        args.setExchange(exchange);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_exchangeAdd();
      }
    }

    public void exchangeDelete(String exchangeName, org.apache.thrift.async.AsyncMethodCallback<exchangeDelete_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      exchangeDelete_call method_call = new exchangeDelete_call(exchangeName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class exchangeDelete_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String exchangeName;
      public exchangeDelete_call(String exchangeName, org.apache.thrift.async.AsyncMethodCallback<exchangeDelete_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.exchangeName = exchangeName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("exchangeDelete", org.apache.thrift.protocol.TMessageType.CALL, 0));
        exchangeDelete_args args = new exchangeDelete_args();
        args.setExchangeName(exchangeName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_exchangeDelete();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("queueAdd", new queueAdd());
      processMap.put("queueDelete", new queueDelete());
      processMap.put("queueClear", new queueClear());
      processMap.put("queueUnbindAllExchange", new queueUnbindAllExchange());
      processMap.put("queueBind", new queueBind());
      processMap.put("queueUnbindByRouterKey", new queueUnbindByRouterKey());
      processMap.put("queueUnbind", new queueUnbind());
      processMap.put("exchangeAdd", new exchangeAdd());
      processMap.put("exchangeDelete", new exchangeDelete());
      return processMap;
    }

    public static class queueAdd<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queueAdd_args> {
      public queueAdd() {
        super("queueAdd");
      }

      public queueAdd_args getEmptyArgsInstance() {
        return new queueAdd_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queueAdd_result getResult(I iface, queueAdd_args args) throws org.apache.thrift.TException {
        queueAdd_result result = new queueAdd_result();
        iface.queueAdd(args.queueName);
        return result;
      }
    }

    public static class queueDelete<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queueDelete_args> {
      public queueDelete() {
        super("queueDelete");
      }

      public queueDelete_args getEmptyArgsInstance() {
        return new queueDelete_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queueDelete_result getResult(I iface, queueDelete_args args) throws org.apache.thrift.TException {
        queueDelete_result result = new queueDelete_result();
        iface.queueDelete(args.queueName);
        return result;
      }
    }

    public static class queueClear<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queueClear_args> {
      public queueClear() {
        super("queueClear");
      }

      public queueClear_args getEmptyArgsInstance() {
        return new queueClear_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queueClear_result getResult(I iface, queueClear_args args) throws org.apache.thrift.TException {
        queueClear_result result = new queueClear_result();
        iface.queueClear(args.queueName);
        return result;
      }
    }

    public static class queueUnbindAllExchange<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queueUnbindAllExchange_args> {
      public queueUnbindAllExchange() {
        super("queueUnbindAllExchange");
      }

      public queueUnbindAllExchange_args getEmptyArgsInstance() {
        return new queueUnbindAllExchange_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queueUnbindAllExchange_result getResult(I iface, queueUnbindAllExchange_args args) throws org.apache.thrift.TException {
        queueUnbindAllExchange_result result = new queueUnbindAllExchange_result();
        iface.queueUnbindAllExchange(args.queueName);
        return result;
      }
    }

    public static class queueBind<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queueBind_args> {
      public queueBind() {
        super("queueBind");
      }

      public queueBind_args getEmptyArgsInstance() {
        return new queueBind_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queueBind_result getResult(I iface, queueBind_args args) throws org.apache.thrift.TException {
        queueBind_result result = new queueBind_result();
        iface.queueBind(args.exchangeName, args.queueName, args.routerKey);
        return result;
      }
    }

    public static class queueUnbindByRouterKey<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queueUnbindByRouterKey_args> {
      public queueUnbindByRouterKey() {
        super("queueUnbindByRouterKey");
      }

      public queueUnbindByRouterKey_args getEmptyArgsInstance() {
        return new queueUnbindByRouterKey_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queueUnbindByRouterKey_result getResult(I iface, queueUnbindByRouterKey_args args) throws org.apache.thrift.TException {
        queueUnbindByRouterKey_result result = new queueUnbindByRouterKey_result();
        iface.queueUnbindByRouterKey(args.exchangeName, args.queueName, args.routerKey);
        return result;
      }
    }

    public static class queueUnbind<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queueUnbind_args> {
      public queueUnbind() {
        super("queueUnbind");
      }

      public queueUnbind_args getEmptyArgsInstance() {
        return new queueUnbind_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queueUnbind_result getResult(I iface, queueUnbind_args args) throws org.apache.thrift.TException {
        queueUnbind_result result = new queueUnbind_result();
        iface.queueUnbind(args.exchangeName, args.queueName);
        return result;
      }
    }

    public static class exchangeAdd<I extends Iface> extends org.apache.thrift.ProcessFunction<I, exchangeAdd_args> {
      public exchangeAdd() {
        super("exchangeAdd");
      }

      public exchangeAdd_args getEmptyArgsInstance() {
        return new exchangeAdd_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public exchangeAdd_result getResult(I iface, exchangeAdd_args args) throws org.apache.thrift.TException {
        exchangeAdd_result result = new exchangeAdd_result();
        iface.exchangeAdd(args.exchange);
        return result;
      }
    }

    public static class exchangeDelete<I extends Iface> extends org.apache.thrift.ProcessFunction<I, exchangeDelete_args> {
      public exchangeDelete() {
        super("exchangeDelete");
      }

      public exchangeDelete_args getEmptyArgsInstance() {
        return new exchangeDelete_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public exchangeDelete_result getResult(I iface, exchangeDelete_args args) throws org.apache.thrift.TException {
        exchangeDelete_result result = new exchangeDelete_result();
        iface.exchangeDelete(args.exchangeName);
        return result;
      }
    }

  }

  public static class queueAdd_args implements org.apache.thrift.TBase<queueAdd_args, queueAdd_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queueAdd_args");

    private static final org.apache.thrift.protocol.TField QUEUE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("queueName", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queueAdd_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queueAdd_argsTupleSchemeFactory());
    }

    public String queueName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUEUE_NAME((short)1, "queueName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUEUE_NAME
            return QUEUE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUEUE_NAME, new org.apache.thrift.meta_data.FieldMetaData("queueName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queueAdd_args.class, metaDataMap);
    }

    public queueAdd_args() {
    }

    public queueAdd_args(
      String queueName)
    {
      this();
      this.queueName = queueName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queueAdd_args(queueAdd_args other) {
      if (other.isSetQueueName()) {
        this.queueName = other.queueName;
      }
    }

    public queueAdd_args deepCopy() {
      return new queueAdd_args(this);
    }

    @Override
    public void clear() {
      this.queueName = null;
    }

    public String getQueueName() {
      return this.queueName;
    }

    public queueAdd_args setQueueName(String queueName) {
      this.queueName = queueName;
      return this;
    }

    public void unsetQueueName() {
      this.queueName = null;
    }

    /** Returns true if field queueName is set (has been assigned a value) and false otherwise */
    public boolean isSetQueueName() {
      return this.queueName != null;
    }

    public void setQueueNameIsSet(boolean value) {
      if (!value) {
        this.queueName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QUEUE_NAME:
        if (value == null) {
          unsetQueueName();
        } else {
          setQueueName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QUEUE_NAME:
        return getQueueName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case QUEUE_NAME:
        return isSetQueueName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queueAdd_args)
        return this.equals((queueAdd_args)that);
      return false;
    }

    public boolean equals(queueAdd_args that) {
      if (that == null)
        return false;

      boolean this_present_queueName = true && this.isSetQueueName();
      boolean that_present_queueName = true && that.isSetQueueName();
      if (this_present_queueName || that_present_queueName) {
        if (!(this_present_queueName && that_present_queueName))
          return false;
        if (!this.queueName.equals(that.queueName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(queueAdd_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      queueAdd_args typedOther = (queueAdd_args)other;

      lastComparison = Boolean.valueOf(isSetQueueName()).compareTo(typedOther.isSetQueueName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQueueName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queueName, typedOther.queueName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queueAdd_args(");
      boolean first = true;

      sb.append("queueName:");
      if (this.queueName == null) {
        sb.append("null");
      } else {
        sb.append(this.queueName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queueAdd_argsStandardSchemeFactory implements SchemeFactory {
      public queueAdd_argsStandardScheme getScheme() {
        return new queueAdd_argsStandardScheme();
      }
    }

    private static class queueAdd_argsStandardScheme extends StandardScheme<queueAdd_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queueAdd_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUEUE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.queueName = iprot.readString();
                struct.setQueueNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queueAdd_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.queueName != null) {
          oprot.writeFieldBegin(QUEUE_NAME_FIELD_DESC);
          oprot.writeString(struct.queueName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queueAdd_argsTupleSchemeFactory implements SchemeFactory {
      public queueAdd_argsTupleScheme getScheme() {
        return new queueAdd_argsTupleScheme();
      }
    }

    private static class queueAdd_argsTupleScheme extends TupleScheme<queueAdd_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queueAdd_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQueueName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetQueueName()) {
          oprot.writeString(struct.queueName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queueAdd_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.queueName = iprot.readString();
          struct.setQueueNameIsSet(true);
        }
      }
    }

  }

  public static class queueAdd_result implements org.apache.thrift.TBase<queueAdd_result, queueAdd_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queueAdd_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queueAdd_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queueAdd_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queueAdd_result.class, metaDataMap);
    }

    public queueAdd_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queueAdd_result(queueAdd_result other) {
    }

    public queueAdd_result deepCopy() {
      return new queueAdd_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queueAdd_result)
        return this.equals((queueAdd_result)that);
      return false;
    }

    public boolean equals(queueAdd_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(queueAdd_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      queueAdd_result typedOther = (queueAdd_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queueAdd_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queueAdd_resultStandardSchemeFactory implements SchemeFactory {
      public queueAdd_resultStandardScheme getScheme() {
        return new queueAdd_resultStandardScheme();
      }
    }

    private static class queueAdd_resultStandardScheme extends StandardScheme<queueAdd_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queueAdd_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queueAdd_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queueAdd_resultTupleSchemeFactory implements SchemeFactory {
      public queueAdd_resultTupleScheme getScheme() {
        return new queueAdd_resultTupleScheme();
      }
    }

    private static class queueAdd_resultTupleScheme extends TupleScheme<queueAdd_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queueAdd_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queueAdd_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class queueDelete_args implements org.apache.thrift.TBase<queueDelete_args, queueDelete_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queueDelete_args");

    private static final org.apache.thrift.protocol.TField QUEUE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("queueName", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queueDelete_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queueDelete_argsTupleSchemeFactory());
    }

    public String queueName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUEUE_NAME((short)1, "queueName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUEUE_NAME
            return QUEUE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUEUE_NAME, new org.apache.thrift.meta_data.FieldMetaData("queueName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queueDelete_args.class, metaDataMap);
    }

    public queueDelete_args() {
    }

    public queueDelete_args(
      String queueName)
    {
      this();
      this.queueName = queueName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queueDelete_args(queueDelete_args other) {
      if (other.isSetQueueName()) {
        this.queueName = other.queueName;
      }
    }

    public queueDelete_args deepCopy() {
      return new queueDelete_args(this);
    }

    @Override
    public void clear() {
      this.queueName = null;
    }

    public String getQueueName() {
      return this.queueName;
    }

    public queueDelete_args setQueueName(String queueName) {
      this.queueName = queueName;
      return this;
    }

    public void unsetQueueName() {
      this.queueName = null;
    }

    /** Returns true if field queueName is set (has been assigned a value) and false otherwise */
    public boolean isSetQueueName() {
      return this.queueName != null;
    }

    public void setQueueNameIsSet(boolean value) {
      if (!value) {
        this.queueName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QUEUE_NAME:
        if (value == null) {
          unsetQueueName();
        } else {
          setQueueName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QUEUE_NAME:
        return getQueueName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case QUEUE_NAME:
        return isSetQueueName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queueDelete_args)
        return this.equals((queueDelete_args)that);
      return false;
    }

    public boolean equals(queueDelete_args that) {
      if (that == null)
        return false;

      boolean this_present_queueName = true && this.isSetQueueName();
      boolean that_present_queueName = true && that.isSetQueueName();
      if (this_present_queueName || that_present_queueName) {
        if (!(this_present_queueName && that_present_queueName))
          return false;
        if (!this.queueName.equals(that.queueName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(queueDelete_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      queueDelete_args typedOther = (queueDelete_args)other;

      lastComparison = Boolean.valueOf(isSetQueueName()).compareTo(typedOther.isSetQueueName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQueueName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queueName, typedOther.queueName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queueDelete_args(");
      boolean first = true;

      sb.append("queueName:");
      if (this.queueName == null) {
        sb.append("null");
      } else {
        sb.append(this.queueName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queueDelete_argsStandardSchemeFactory implements SchemeFactory {
      public queueDelete_argsStandardScheme getScheme() {
        return new queueDelete_argsStandardScheme();
      }
    }

    private static class queueDelete_argsStandardScheme extends StandardScheme<queueDelete_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queueDelete_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUEUE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.queueName = iprot.readString();
                struct.setQueueNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queueDelete_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.queueName != null) {
          oprot.writeFieldBegin(QUEUE_NAME_FIELD_DESC);
          oprot.writeString(struct.queueName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queueDelete_argsTupleSchemeFactory implements SchemeFactory {
      public queueDelete_argsTupleScheme getScheme() {
        return new queueDelete_argsTupleScheme();
      }
    }

    private static class queueDelete_argsTupleScheme extends TupleScheme<queueDelete_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queueDelete_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQueueName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetQueueName()) {
          oprot.writeString(struct.queueName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queueDelete_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.queueName = iprot.readString();
          struct.setQueueNameIsSet(true);
        }
      }
    }

  }

  public static class queueDelete_result implements org.apache.thrift.TBase<queueDelete_result, queueDelete_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queueDelete_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queueDelete_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queueDelete_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queueDelete_result.class, metaDataMap);
    }

    public queueDelete_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queueDelete_result(queueDelete_result other) {
    }

    public queueDelete_result deepCopy() {
      return new queueDelete_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queueDelete_result)
        return this.equals((queueDelete_result)that);
      return false;
    }

    public boolean equals(queueDelete_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(queueDelete_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      queueDelete_result typedOther = (queueDelete_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queueDelete_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queueDelete_resultStandardSchemeFactory implements SchemeFactory {
      public queueDelete_resultStandardScheme getScheme() {
        return new queueDelete_resultStandardScheme();
      }
    }

    private static class queueDelete_resultStandardScheme extends StandardScheme<queueDelete_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queueDelete_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queueDelete_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queueDelete_resultTupleSchemeFactory implements SchemeFactory {
      public queueDelete_resultTupleScheme getScheme() {
        return new queueDelete_resultTupleScheme();
      }
    }

    private static class queueDelete_resultTupleScheme extends TupleScheme<queueDelete_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queueDelete_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queueDelete_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class queueClear_args implements org.apache.thrift.TBase<queueClear_args, queueClear_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queueClear_args");

    private static final org.apache.thrift.protocol.TField QUEUE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("queueName", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queueClear_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queueClear_argsTupleSchemeFactory());
    }

    public String queueName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUEUE_NAME((short)1, "queueName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUEUE_NAME
            return QUEUE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUEUE_NAME, new org.apache.thrift.meta_data.FieldMetaData("queueName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queueClear_args.class, metaDataMap);
    }

    public queueClear_args() {
    }

    public queueClear_args(
      String queueName)
    {
      this();
      this.queueName = queueName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queueClear_args(queueClear_args other) {
      if (other.isSetQueueName()) {
        this.queueName = other.queueName;
      }
    }

    public queueClear_args deepCopy() {
      return new queueClear_args(this);
    }

    @Override
    public void clear() {
      this.queueName = null;
    }

    public String getQueueName() {
      return this.queueName;
    }

    public queueClear_args setQueueName(String queueName) {
      this.queueName = queueName;
      return this;
    }

    public void unsetQueueName() {
      this.queueName = null;
    }

    /** Returns true if field queueName is set (has been assigned a value) and false otherwise */
    public boolean isSetQueueName() {
      return this.queueName != null;
    }

    public void setQueueNameIsSet(boolean value) {
      if (!value) {
        this.queueName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QUEUE_NAME:
        if (value == null) {
          unsetQueueName();
        } else {
          setQueueName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QUEUE_NAME:
        return getQueueName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case QUEUE_NAME:
        return isSetQueueName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queueClear_args)
        return this.equals((queueClear_args)that);
      return false;
    }

    public boolean equals(queueClear_args that) {
      if (that == null)
        return false;

      boolean this_present_queueName = true && this.isSetQueueName();
      boolean that_present_queueName = true && that.isSetQueueName();
      if (this_present_queueName || that_present_queueName) {
        if (!(this_present_queueName && that_present_queueName))
          return false;
        if (!this.queueName.equals(that.queueName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(queueClear_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      queueClear_args typedOther = (queueClear_args)other;

      lastComparison = Boolean.valueOf(isSetQueueName()).compareTo(typedOther.isSetQueueName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQueueName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queueName, typedOther.queueName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queueClear_args(");
      boolean first = true;

      sb.append("queueName:");
      if (this.queueName == null) {
        sb.append("null");
      } else {
        sb.append(this.queueName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queueClear_argsStandardSchemeFactory implements SchemeFactory {
      public queueClear_argsStandardScheme getScheme() {
        return new queueClear_argsStandardScheme();
      }
    }

    private static class queueClear_argsStandardScheme extends StandardScheme<queueClear_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queueClear_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUEUE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.queueName = iprot.readString();
                struct.setQueueNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queueClear_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.queueName != null) {
          oprot.writeFieldBegin(QUEUE_NAME_FIELD_DESC);
          oprot.writeString(struct.queueName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queueClear_argsTupleSchemeFactory implements SchemeFactory {
      public queueClear_argsTupleScheme getScheme() {
        return new queueClear_argsTupleScheme();
      }
    }

    private static class queueClear_argsTupleScheme extends TupleScheme<queueClear_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queueClear_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQueueName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetQueueName()) {
          oprot.writeString(struct.queueName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queueClear_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.queueName = iprot.readString();
          struct.setQueueNameIsSet(true);
        }
      }
    }

  }

  public static class queueClear_result implements org.apache.thrift.TBase<queueClear_result, queueClear_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queueClear_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queueClear_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queueClear_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queueClear_result.class, metaDataMap);
    }

    public queueClear_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queueClear_result(queueClear_result other) {
    }

    public queueClear_result deepCopy() {
      return new queueClear_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queueClear_result)
        return this.equals((queueClear_result)that);
      return false;
    }

    public boolean equals(queueClear_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(queueClear_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      queueClear_result typedOther = (queueClear_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queueClear_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queueClear_resultStandardSchemeFactory implements SchemeFactory {
      public queueClear_resultStandardScheme getScheme() {
        return new queueClear_resultStandardScheme();
      }
    }

    private static class queueClear_resultStandardScheme extends StandardScheme<queueClear_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queueClear_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queueClear_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queueClear_resultTupleSchemeFactory implements SchemeFactory {
      public queueClear_resultTupleScheme getScheme() {
        return new queueClear_resultTupleScheme();
      }
    }

    private static class queueClear_resultTupleScheme extends TupleScheme<queueClear_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queueClear_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queueClear_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class queueUnbindAllExchange_args implements org.apache.thrift.TBase<queueUnbindAllExchange_args, queueUnbindAllExchange_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queueUnbindAllExchange_args");

    private static final org.apache.thrift.protocol.TField QUEUE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("queueName", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queueUnbindAllExchange_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queueUnbindAllExchange_argsTupleSchemeFactory());
    }

    public String queueName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUEUE_NAME((short)1, "queueName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUEUE_NAME
            return QUEUE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUEUE_NAME, new org.apache.thrift.meta_data.FieldMetaData("queueName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queueUnbindAllExchange_args.class, metaDataMap);
    }

    public queueUnbindAllExchange_args() {
    }

    public queueUnbindAllExchange_args(
      String queueName)
    {
      this();
      this.queueName = queueName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queueUnbindAllExchange_args(queueUnbindAllExchange_args other) {
      if (other.isSetQueueName()) {
        this.queueName = other.queueName;
      }
    }

    public queueUnbindAllExchange_args deepCopy() {
      return new queueUnbindAllExchange_args(this);
    }

    @Override
    public void clear() {
      this.queueName = null;
    }

    public String getQueueName() {
      return this.queueName;
    }

    public queueUnbindAllExchange_args setQueueName(String queueName) {
      this.queueName = queueName;
      return this;
    }

    public void unsetQueueName() {
      this.queueName = null;
    }

    /** Returns true if field queueName is set (has been assigned a value) and false otherwise */
    public boolean isSetQueueName() {
      return this.queueName != null;
    }

    public void setQueueNameIsSet(boolean value) {
      if (!value) {
        this.queueName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QUEUE_NAME:
        if (value == null) {
          unsetQueueName();
        } else {
          setQueueName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QUEUE_NAME:
        return getQueueName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case QUEUE_NAME:
        return isSetQueueName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queueUnbindAllExchange_args)
        return this.equals((queueUnbindAllExchange_args)that);
      return false;
    }

    public boolean equals(queueUnbindAllExchange_args that) {
      if (that == null)
        return false;

      boolean this_present_queueName = true && this.isSetQueueName();
      boolean that_present_queueName = true && that.isSetQueueName();
      if (this_present_queueName || that_present_queueName) {
        if (!(this_present_queueName && that_present_queueName))
          return false;
        if (!this.queueName.equals(that.queueName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(queueUnbindAllExchange_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      queueUnbindAllExchange_args typedOther = (queueUnbindAllExchange_args)other;

      lastComparison = Boolean.valueOf(isSetQueueName()).compareTo(typedOther.isSetQueueName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQueueName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queueName, typedOther.queueName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queueUnbindAllExchange_args(");
      boolean first = true;

      sb.append("queueName:");
      if (this.queueName == null) {
        sb.append("null");
      } else {
        sb.append(this.queueName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queueUnbindAllExchange_argsStandardSchemeFactory implements SchemeFactory {
      public queueUnbindAllExchange_argsStandardScheme getScheme() {
        return new queueUnbindAllExchange_argsStandardScheme();
      }
    }

    private static class queueUnbindAllExchange_argsStandardScheme extends StandardScheme<queueUnbindAllExchange_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queueUnbindAllExchange_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUEUE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.queueName = iprot.readString();
                struct.setQueueNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queueUnbindAllExchange_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.queueName != null) {
          oprot.writeFieldBegin(QUEUE_NAME_FIELD_DESC);
          oprot.writeString(struct.queueName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queueUnbindAllExchange_argsTupleSchemeFactory implements SchemeFactory {
      public queueUnbindAllExchange_argsTupleScheme getScheme() {
        return new queueUnbindAllExchange_argsTupleScheme();
      }
    }

    private static class queueUnbindAllExchange_argsTupleScheme extends TupleScheme<queueUnbindAllExchange_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queueUnbindAllExchange_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQueueName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetQueueName()) {
          oprot.writeString(struct.queueName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queueUnbindAllExchange_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.queueName = iprot.readString();
          struct.setQueueNameIsSet(true);
        }
      }
    }

  }

  public static class queueUnbindAllExchange_result implements org.apache.thrift.TBase<queueUnbindAllExchange_result, queueUnbindAllExchange_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queueUnbindAllExchange_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queueUnbindAllExchange_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queueUnbindAllExchange_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queueUnbindAllExchange_result.class, metaDataMap);
    }

    public queueUnbindAllExchange_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queueUnbindAllExchange_result(queueUnbindAllExchange_result other) {
    }

    public queueUnbindAllExchange_result deepCopy() {
      return new queueUnbindAllExchange_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queueUnbindAllExchange_result)
        return this.equals((queueUnbindAllExchange_result)that);
      return false;
    }

    public boolean equals(queueUnbindAllExchange_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(queueUnbindAllExchange_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      queueUnbindAllExchange_result typedOther = (queueUnbindAllExchange_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queueUnbindAllExchange_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queueUnbindAllExchange_resultStandardSchemeFactory implements SchemeFactory {
      public queueUnbindAllExchange_resultStandardScheme getScheme() {
        return new queueUnbindAllExchange_resultStandardScheme();
      }
    }

    private static class queueUnbindAllExchange_resultStandardScheme extends StandardScheme<queueUnbindAllExchange_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queueUnbindAllExchange_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queueUnbindAllExchange_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queueUnbindAllExchange_resultTupleSchemeFactory implements SchemeFactory {
      public queueUnbindAllExchange_resultTupleScheme getScheme() {
        return new queueUnbindAllExchange_resultTupleScheme();
      }
    }

    private static class queueUnbindAllExchange_resultTupleScheme extends TupleScheme<queueUnbindAllExchange_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queueUnbindAllExchange_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queueUnbindAllExchange_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class queueBind_args implements org.apache.thrift.TBase<queueBind_args, queueBind_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queueBind_args");

    private static final org.apache.thrift.protocol.TField EXCHANGE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("exchangeName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField QUEUE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("queueName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ROUTER_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("routerKey", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queueBind_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queueBind_argsTupleSchemeFactory());
    }

    public String exchangeName; // required
    public String queueName; // required
    public String routerKey; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXCHANGE_NAME((short)1, "exchangeName"),
      QUEUE_NAME((short)2, "queueName"),
      ROUTER_KEY((short)3, "routerKey");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXCHANGE_NAME
            return EXCHANGE_NAME;
          case 2: // QUEUE_NAME
            return QUEUE_NAME;
          case 3: // ROUTER_KEY
            return ROUTER_KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXCHANGE_NAME, new org.apache.thrift.meta_data.FieldMetaData("exchangeName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.QUEUE_NAME, new org.apache.thrift.meta_data.FieldMetaData("queueName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ROUTER_KEY, new org.apache.thrift.meta_data.FieldMetaData("routerKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queueBind_args.class, metaDataMap);
    }

    public queueBind_args() {
    }

    public queueBind_args(
      String exchangeName,
      String queueName,
      String routerKey)
    {
      this();
      this.exchangeName = exchangeName;
      this.queueName = queueName;
      this.routerKey = routerKey;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queueBind_args(queueBind_args other) {
      if (other.isSetExchangeName()) {
        this.exchangeName = other.exchangeName;
      }
      if (other.isSetQueueName()) {
        this.queueName = other.queueName;
      }
      if (other.isSetRouterKey()) {
        this.routerKey = other.routerKey;
      }
    }

    public queueBind_args deepCopy() {
      return new queueBind_args(this);
    }

    @Override
    public void clear() {
      this.exchangeName = null;
      this.queueName = null;
      this.routerKey = null;
    }

    public String getExchangeName() {
      return this.exchangeName;
    }

    public queueBind_args setExchangeName(String exchangeName) {
      this.exchangeName = exchangeName;
      return this;
    }

    public void unsetExchangeName() {
      this.exchangeName = null;
    }

    /** Returns true if field exchangeName is set (has been assigned a value) and false otherwise */
    public boolean isSetExchangeName() {
      return this.exchangeName != null;
    }

    public void setExchangeNameIsSet(boolean value) {
      if (!value) {
        this.exchangeName = null;
      }
    }

    public String getQueueName() {
      return this.queueName;
    }

    public queueBind_args setQueueName(String queueName) {
      this.queueName = queueName;
      return this;
    }

    public void unsetQueueName() {
      this.queueName = null;
    }

    /** Returns true if field queueName is set (has been assigned a value) and false otherwise */
    public boolean isSetQueueName() {
      return this.queueName != null;
    }

    public void setQueueNameIsSet(boolean value) {
      if (!value) {
        this.queueName = null;
      }
    }

    public String getRouterKey() {
      return this.routerKey;
    }

    public queueBind_args setRouterKey(String routerKey) {
      this.routerKey = routerKey;
      return this;
    }

    public void unsetRouterKey() {
      this.routerKey = null;
    }

    /** Returns true if field routerKey is set (has been assigned a value) and false otherwise */
    public boolean isSetRouterKey() {
      return this.routerKey != null;
    }

    public void setRouterKeyIsSet(boolean value) {
      if (!value) {
        this.routerKey = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EXCHANGE_NAME:
        if (value == null) {
          unsetExchangeName();
        } else {
          setExchangeName((String)value);
        }
        break;

      case QUEUE_NAME:
        if (value == null) {
          unsetQueueName();
        } else {
          setQueueName((String)value);
        }
        break;

      case ROUTER_KEY:
        if (value == null) {
          unsetRouterKey();
        } else {
          setRouterKey((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EXCHANGE_NAME:
        return getExchangeName();

      case QUEUE_NAME:
        return getQueueName();

      case ROUTER_KEY:
        return getRouterKey();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EXCHANGE_NAME:
        return isSetExchangeName();
      case QUEUE_NAME:
        return isSetQueueName();
      case ROUTER_KEY:
        return isSetRouterKey();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queueBind_args)
        return this.equals((queueBind_args)that);
      return false;
    }

    public boolean equals(queueBind_args that) {
      if (that == null)
        return false;

      boolean this_present_exchangeName = true && this.isSetExchangeName();
      boolean that_present_exchangeName = true && that.isSetExchangeName();
      if (this_present_exchangeName || that_present_exchangeName) {
        if (!(this_present_exchangeName && that_present_exchangeName))
          return false;
        if (!this.exchangeName.equals(that.exchangeName))
          return false;
      }

      boolean this_present_queueName = true && this.isSetQueueName();
      boolean that_present_queueName = true && that.isSetQueueName();
      if (this_present_queueName || that_present_queueName) {
        if (!(this_present_queueName && that_present_queueName))
          return false;
        if (!this.queueName.equals(that.queueName))
          return false;
      }

      boolean this_present_routerKey = true && this.isSetRouterKey();
      boolean that_present_routerKey = true && that.isSetRouterKey();
      if (this_present_routerKey || that_present_routerKey) {
        if (!(this_present_routerKey && that_present_routerKey))
          return false;
        if (!this.routerKey.equals(that.routerKey))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(queueBind_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      queueBind_args typedOther = (queueBind_args)other;

      lastComparison = Boolean.valueOf(isSetExchangeName()).compareTo(typedOther.isSetExchangeName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExchangeName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchangeName, typedOther.exchangeName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQueueName()).compareTo(typedOther.isSetQueueName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQueueName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queueName, typedOther.queueName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRouterKey()).compareTo(typedOther.isSetRouterKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRouterKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.routerKey, typedOther.routerKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queueBind_args(");
      boolean first = true;

      sb.append("exchangeName:");
      if (this.exchangeName == null) {
        sb.append("null");
      } else {
        sb.append(this.exchangeName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("queueName:");
      if (this.queueName == null) {
        sb.append("null");
      } else {
        sb.append(this.queueName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("routerKey:");
      if (this.routerKey == null) {
        sb.append("null");
      } else {
        sb.append(this.routerKey);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queueBind_argsStandardSchemeFactory implements SchemeFactory {
      public queueBind_argsStandardScheme getScheme() {
        return new queueBind_argsStandardScheme();
      }
    }

    private static class queueBind_argsStandardScheme extends StandardScheme<queueBind_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queueBind_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EXCHANGE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.exchangeName = iprot.readString();
                struct.setExchangeNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // QUEUE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.queueName = iprot.readString();
                struct.setQueueNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ROUTER_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.routerKey = iprot.readString();
                struct.setRouterKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queueBind_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.exchangeName != null) {
          oprot.writeFieldBegin(EXCHANGE_NAME_FIELD_DESC);
          oprot.writeString(struct.exchangeName);
          oprot.writeFieldEnd();
        }
        if (struct.queueName != null) {
          oprot.writeFieldBegin(QUEUE_NAME_FIELD_DESC);
          oprot.writeString(struct.queueName);
          oprot.writeFieldEnd();
        }
        if (struct.routerKey != null) {
          oprot.writeFieldBegin(ROUTER_KEY_FIELD_DESC);
          oprot.writeString(struct.routerKey);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queueBind_argsTupleSchemeFactory implements SchemeFactory {
      public queueBind_argsTupleScheme getScheme() {
        return new queueBind_argsTupleScheme();
      }
    }

    private static class queueBind_argsTupleScheme extends TupleScheme<queueBind_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queueBind_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetExchangeName()) {
          optionals.set(0);
        }
        if (struct.isSetQueueName()) {
          optionals.set(1);
        }
        if (struct.isSetRouterKey()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetExchangeName()) {
          oprot.writeString(struct.exchangeName);
        }
        if (struct.isSetQueueName()) {
          oprot.writeString(struct.queueName);
        }
        if (struct.isSetRouterKey()) {
          oprot.writeString(struct.routerKey);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queueBind_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.exchangeName = iprot.readString();
          struct.setExchangeNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.queueName = iprot.readString();
          struct.setQueueNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.routerKey = iprot.readString();
          struct.setRouterKeyIsSet(true);
        }
      }
    }

  }

  public static class queueBind_result implements org.apache.thrift.TBase<queueBind_result, queueBind_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queueBind_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queueBind_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queueBind_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queueBind_result.class, metaDataMap);
    }

    public queueBind_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queueBind_result(queueBind_result other) {
    }

    public queueBind_result deepCopy() {
      return new queueBind_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queueBind_result)
        return this.equals((queueBind_result)that);
      return false;
    }

    public boolean equals(queueBind_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(queueBind_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      queueBind_result typedOther = (queueBind_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queueBind_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queueBind_resultStandardSchemeFactory implements SchemeFactory {
      public queueBind_resultStandardScheme getScheme() {
        return new queueBind_resultStandardScheme();
      }
    }

    private static class queueBind_resultStandardScheme extends StandardScheme<queueBind_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queueBind_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queueBind_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queueBind_resultTupleSchemeFactory implements SchemeFactory {
      public queueBind_resultTupleScheme getScheme() {
        return new queueBind_resultTupleScheme();
      }
    }

    private static class queueBind_resultTupleScheme extends TupleScheme<queueBind_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queueBind_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queueBind_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class queueUnbindByRouterKey_args implements org.apache.thrift.TBase<queueUnbindByRouterKey_args, queueUnbindByRouterKey_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queueUnbindByRouterKey_args");

    private static final org.apache.thrift.protocol.TField EXCHANGE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("exchangeName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField QUEUE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("queueName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ROUTER_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("routerKey", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queueUnbindByRouterKey_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queueUnbindByRouterKey_argsTupleSchemeFactory());
    }

    public String exchangeName; // required
    public String queueName; // required
    public String routerKey; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXCHANGE_NAME((short)1, "exchangeName"),
      QUEUE_NAME((short)2, "queueName"),
      ROUTER_KEY((short)3, "routerKey");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXCHANGE_NAME
            return EXCHANGE_NAME;
          case 2: // QUEUE_NAME
            return QUEUE_NAME;
          case 3: // ROUTER_KEY
            return ROUTER_KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXCHANGE_NAME, new org.apache.thrift.meta_data.FieldMetaData("exchangeName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.QUEUE_NAME, new org.apache.thrift.meta_data.FieldMetaData("queueName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ROUTER_KEY, new org.apache.thrift.meta_data.FieldMetaData("routerKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queueUnbindByRouterKey_args.class, metaDataMap);
    }

    public queueUnbindByRouterKey_args() {
    }

    public queueUnbindByRouterKey_args(
      String exchangeName,
      String queueName,
      String routerKey)
    {
      this();
      this.exchangeName = exchangeName;
      this.queueName = queueName;
      this.routerKey = routerKey;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queueUnbindByRouterKey_args(queueUnbindByRouterKey_args other) {
      if (other.isSetExchangeName()) {
        this.exchangeName = other.exchangeName;
      }
      if (other.isSetQueueName()) {
        this.queueName = other.queueName;
      }
      if (other.isSetRouterKey()) {
        this.routerKey = other.routerKey;
      }
    }

    public queueUnbindByRouterKey_args deepCopy() {
      return new queueUnbindByRouterKey_args(this);
    }

    @Override
    public void clear() {
      this.exchangeName = null;
      this.queueName = null;
      this.routerKey = null;
    }

    public String getExchangeName() {
      return this.exchangeName;
    }

    public queueUnbindByRouterKey_args setExchangeName(String exchangeName) {
      this.exchangeName = exchangeName;
      return this;
    }

    public void unsetExchangeName() {
      this.exchangeName = null;
    }

    /** Returns true if field exchangeName is set (has been assigned a value) and false otherwise */
    public boolean isSetExchangeName() {
      return this.exchangeName != null;
    }

    public void setExchangeNameIsSet(boolean value) {
      if (!value) {
        this.exchangeName = null;
      }
    }

    public String getQueueName() {
      return this.queueName;
    }

    public queueUnbindByRouterKey_args setQueueName(String queueName) {
      this.queueName = queueName;
      return this;
    }

    public void unsetQueueName() {
      this.queueName = null;
    }

    /** Returns true if field queueName is set (has been assigned a value) and false otherwise */
    public boolean isSetQueueName() {
      return this.queueName != null;
    }

    public void setQueueNameIsSet(boolean value) {
      if (!value) {
        this.queueName = null;
      }
    }

    public String getRouterKey() {
      return this.routerKey;
    }

    public queueUnbindByRouterKey_args setRouterKey(String routerKey) {
      this.routerKey = routerKey;
      return this;
    }

    public void unsetRouterKey() {
      this.routerKey = null;
    }

    /** Returns true if field routerKey is set (has been assigned a value) and false otherwise */
    public boolean isSetRouterKey() {
      return this.routerKey != null;
    }

    public void setRouterKeyIsSet(boolean value) {
      if (!value) {
        this.routerKey = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EXCHANGE_NAME:
        if (value == null) {
          unsetExchangeName();
        } else {
          setExchangeName((String)value);
        }
        break;

      case QUEUE_NAME:
        if (value == null) {
          unsetQueueName();
        } else {
          setQueueName((String)value);
        }
        break;

      case ROUTER_KEY:
        if (value == null) {
          unsetRouterKey();
        } else {
          setRouterKey((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EXCHANGE_NAME:
        return getExchangeName();

      case QUEUE_NAME:
        return getQueueName();

      case ROUTER_KEY:
        return getRouterKey();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EXCHANGE_NAME:
        return isSetExchangeName();
      case QUEUE_NAME:
        return isSetQueueName();
      case ROUTER_KEY:
        return isSetRouterKey();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queueUnbindByRouterKey_args)
        return this.equals((queueUnbindByRouterKey_args)that);
      return false;
    }

    public boolean equals(queueUnbindByRouterKey_args that) {
      if (that == null)
        return false;

      boolean this_present_exchangeName = true && this.isSetExchangeName();
      boolean that_present_exchangeName = true && that.isSetExchangeName();
      if (this_present_exchangeName || that_present_exchangeName) {
        if (!(this_present_exchangeName && that_present_exchangeName))
          return false;
        if (!this.exchangeName.equals(that.exchangeName))
          return false;
      }

      boolean this_present_queueName = true && this.isSetQueueName();
      boolean that_present_queueName = true && that.isSetQueueName();
      if (this_present_queueName || that_present_queueName) {
        if (!(this_present_queueName && that_present_queueName))
          return false;
        if (!this.queueName.equals(that.queueName))
          return false;
      }

      boolean this_present_routerKey = true && this.isSetRouterKey();
      boolean that_present_routerKey = true && that.isSetRouterKey();
      if (this_present_routerKey || that_present_routerKey) {
        if (!(this_present_routerKey && that_present_routerKey))
          return false;
        if (!this.routerKey.equals(that.routerKey))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(queueUnbindByRouterKey_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      queueUnbindByRouterKey_args typedOther = (queueUnbindByRouterKey_args)other;

      lastComparison = Boolean.valueOf(isSetExchangeName()).compareTo(typedOther.isSetExchangeName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExchangeName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchangeName, typedOther.exchangeName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQueueName()).compareTo(typedOther.isSetQueueName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQueueName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queueName, typedOther.queueName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRouterKey()).compareTo(typedOther.isSetRouterKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRouterKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.routerKey, typedOther.routerKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queueUnbindByRouterKey_args(");
      boolean first = true;

      sb.append("exchangeName:");
      if (this.exchangeName == null) {
        sb.append("null");
      } else {
        sb.append(this.exchangeName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("queueName:");
      if (this.queueName == null) {
        sb.append("null");
      } else {
        sb.append(this.queueName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("routerKey:");
      if (this.routerKey == null) {
        sb.append("null");
      } else {
        sb.append(this.routerKey);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queueUnbindByRouterKey_argsStandardSchemeFactory implements SchemeFactory {
      public queueUnbindByRouterKey_argsStandardScheme getScheme() {
        return new queueUnbindByRouterKey_argsStandardScheme();
      }
    }

    private static class queueUnbindByRouterKey_argsStandardScheme extends StandardScheme<queueUnbindByRouterKey_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queueUnbindByRouterKey_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EXCHANGE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.exchangeName = iprot.readString();
                struct.setExchangeNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // QUEUE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.queueName = iprot.readString();
                struct.setQueueNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ROUTER_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.routerKey = iprot.readString();
                struct.setRouterKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queueUnbindByRouterKey_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.exchangeName != null) {
          oprot.writeFieldBegin(EXCHANGE_NAME_FIELD_DESC);
          oprot.writeString(struct.exchangeName);
          oprot.writeFieldEnd();
        }
        if (struct.queueName != null) {
          oprot.writeFieldBegin(QUEUE_NAME_FIELD_DESC);
          oprot.writeString(struct.queueName);
          oprot.writeFieldEnd();
        }
        if (struct.routerKey != null) {
          oprot.writeFieldBegin(ROUTER_KEY_FIELD_DESC);
          oprot.writeString(struct.routerKey);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queueUnbindByRouterKey_argsTupleSchemeFactory implements SchemeFactory {
      public queueUnbindByRouterKey_argsTupleScheme getScheme() {
        return new queueUnbindByRouterKey_argsTupleScheme();
      }
    }

    private static class queueUnbindByRouterKey_argsTupleScheme extends TupleScheme<queueUnbindByRouterKey_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queueUnbindByRouterKey_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetExchangeName()) {
          optionals.set(0);
        }
        if (struct.isSetQueueName()) {
          optionals.set(1);
        }
        if (struct.isSetRouterKey()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetExchangeName()) {
          oprot.writeString(struct.exchangeName);
        }
        if (struct.isSetQueueName()) {
          oprot.writeString(struct.queueName);
        }
        if (struct.isSetRouterKey()) {
          oprot.writeString(struct.routerKey);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queueUnbindByRouterKey_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.exchangeName = iprot.readString();
          struct.setExchangeNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.queueName = iprot.readString();
          struct.setQueueNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.routerKey = iprot.readString();
          struct.setRouterKeyIsSet(true);
        }
      }
    }

  }

  public static class queueUnbindByRouterKey_result implements org.apache.thrift.TBase<queueUnbindByRouterKey_result, queueUnbindByRouterKey_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queueUnbindByRouterKey_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queueUnbindByRouterKey_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queueUnbindByRouterKey_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queueUnbindByRouterKey_result.class, metaDataMap);
    }

    public queueUnbindByRouterKey_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queueUnbindByRouterKey_result(queueUnbindByRouterKey_result other) {
    }

    public queueUnbindByRouterKey_result deepCopy() {
      return new queueUnbindByRouterKey_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queueUnbindByRouterKey_result)
        return this.equals((queueUnbindByRouterKey_result)that);
      return false;
    }

    public boolean equals(queueUnbindByRouterKey_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(queueUnbindByRouterKey_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      queueUnbindByRouterKey_result typedOther = (queueUnbindByRouterKey_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queueUnbindByRouterKey_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queueUnbindByRouterKey_resultStandardSchemeFactory implements SchemeFactory {
      public queueUnbindByRouterKey_resultStandardScheme getScheme() {
        return new queueUnbindByRouterKey_resultStandardScheme();
      }
    }

    private static class queueUnbindByRouterKey_resultStandardScheme extends StandardScheme<queueUnbindByRouterKey_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queueUnbindByRouterKey_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queueUnbindByRouterKey_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queueUnbindByRouterKey_resultTupleSchemeFactory implements SchemeFactory {
      public queueUnbindByRouterKey_resultTupleScheme getScheme() {
        return new queueUnbindByRouterKey_resultTupleScheme();
      }
    }

    private static class queueUnbindByRouterKey_resultTupleScheme extends TupleScheme<queueUnbindByRouterKey_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queueUnbindByRouterKey_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queueUnbindByRouterKey_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class queueUnbind_args implements org.apache.thrift.TBase<queueUnbind_args, queueUnbind_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queueUnbind_args");

    private static final org.apache.thrift.protocol.TField EXCHANGE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("exchangeName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField QUEUE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("queueName", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queueUnbind_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queueUnbind_argsTupleSchemeFactory());
    }

    public String exchangeName; // required
    public String queueName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXCHANGE_NAME((short)1, "exchangeName"),
      QUEUE_NAME((short)2, "queueName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXCHANGE_NAME
            return EXCHANGE_NAME;
          case 2: // QUEUE_NAME
            return QUEUE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXCHANGE_NAME, new org.apache.thrift.meta_data.FieldMetaData("exchangeName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.QUEUE_NAME, new org.apache.thrift.meta_data.FieldMetaData("queueName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queueUnbind_args.class, metaDataMap);
    }

    public queueUnbind_args() {
    }

    public queueUnbind_args(
      String exchangeName,
      String queueName)
    {
      this();
      this.exchangeName = exchangeName;
      this.queueName = queueName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queueUnbind_args(queueUnbind_args other) {
      if (other.isSetExchangeName()) {
        this.exchangeName = other.exchangeName;
      }
      if (other.isSetQueueName()) {
        this.queueName = other.queueName;
      }
    }

    public queueUnbind_args deepCopy() {
      return new queueUnbind_args(this);
    }

    @Override
    public void clear() {
      this.exchangeName = null;
      this.queueName = null;
    }

    public String getExchangeName() {
      return this.exchangeName;
    }

    public queueUnbind_args setExchangeName(String exchangeName) {
      this.exchangeName = exchangeName;
      return this;
    }

    public void unsetExchangeName() {
      this.exchangeName = null;
    }

    /** Returns true if field exchangeName is set (has been assigned a value) and false otherwise */
    public boolean isSetExchangeName() {
      return this.exchangeName != null;
    }

    public void setExchangeNameIsSet(boolean value) {
      if (!value) {
        this.exchangeName = null;
      }
    }

    public String getQueueName() {
      return this.queueName;
    }

    public queueUnbind_args setQueueName(String queueName) {
      this.queueName = queueName;
      return this;
    }

    public void unsetQueueName() {
      this.queueName = null;
    }

    /** Returns true if field queueName is set (has been assigned a value) and false otherwise */
    public boolean isSetQueueName() {
      return this.queueName != null;
    }

    public void setQueueNameIsSet(boolean value) {
      if (!value) {
        this.queueName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EXCHANGE_NAME:
        if (value == null) {
          unsetExchangeName();
        } else {
          setExchangeName((String)value);
        }
        break;

      case QUEUE_NAME:
        if (value == null) {
          unsetQueueName();
        } else {
          setQueueName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EXCHANGE_NAME:
        return getExchangeName();

      case QUEUE_NAME:
        return getQueueName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EXCHANGE_NAME:
        return isSetExchangeName();
      case QUEUE_NAME:
        return isSetQueueName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queueUnbind_args)
        return this.equals((queueUnbind_args)that);
      return false;
    }

    public boolean equals(queueUnbind_args that) {
      if (that == null)
        return false;

      boolean this_present_exchangeName = true && this.isSetExchangeName();
      boolean that_present_exchangeName = true && that.isSetExchangeName();
      if (this_present_exchangeName || that_present_exchangeName) {
        if (!(this_present_exchangeName && that_present_exchangeName))
          return false;
        if (!this.exchangeName.equals(that.exchangeName))
          return false;
      }

      boolean this_present_queueName = true && this.isSetQueueName();
      boolean that_present_queueName = true && that.isSetQueueName();
      if (this_present_queueName || that_present_queueName) {
        if (!(this_present_queueName && that_present_queueName))
          return false;
        if (!this.queueName.equals(that.queueName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(queueUnbind_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      queueUnbind_args typedOther = (queueUnbind_args)other;

      lastComparison = Boolean.valueOf(isSetExchangeName()).compareTo(typedOther.isSetExchangeName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExchangeName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchangeName, typedOther.exchangeName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQueueName()).compareTo(typedOther.isSetQueueName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQueueName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queueName, typedOther.queueName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queueUnbind_args(");
      boolean first = true;

      sb.append("exchangeName:");
      if (this.exchangeName == null) {
        sb.append("null");
      } else {
        sb.append(this.exchangeName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("queueName:");
      if (this.queueName == null) {
        sb.append("null");
      } else {
        sb.append(this.queueName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queueUnbind_argsStandardSchemeFactory implements SchemeFactory {
      public queueUnbind_argsStandardScheme getScheme() {
        return new queueUnbind_argsStandardScheme();
      }
    }

    private static class queueUnbind_argsStandardScheme extends StandardScheme<queueUnbind_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queueUnbind_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EXCHANGE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.exchangeName = iprot.readString();
                struct.setExchangeNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // QUEUE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.queueName = iprot.readString();
                struct.setQueueNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queueUnbind_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.exchangeName != null) {
          oprot.writeFieldBegin(EXCHANGE_NAME_FIELD_DESC);
          oprot.writeString(struct.exchangeName);
          oprot.writeFieldEnd();
        }
        if (struct.queueName != null) {
          oprot.writeFieldBegin(QUEUE_NAME_FIELD_DESC);
          oprot.writeString(struct.queueName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queueUnbind_argsTupleSchemeFactory implements SchemeFactory {
      public queueUnbind_argsTupleScheme getScheme() {
        return new queueUnbind_argsTupleScheme();
      }
    }

    private static class queueUnbind_argsTupleScheme extends TupleScheme<queueUnbind_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queueUnbind_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetExchangeName()) {
          optionals.set(0);
        }
        if (struct.isSetQueueName()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetExchangeName()) {
          oprot.writeString(struct.exchangeName);
        }
        if (struct.isSetQueueName()) {
          oprot.writeString(struct.queueName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queueUnbind_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.exchangeName = iprot.readString();
          struct.setExchangeNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.queueName = iprot.readString();
          struct.setQueueNameIsSet(true);
        }
      }
    }

  }

  public static class queueUnbind_result implements org.apache.thrift.TBase<queueUnbind_result, queueUnbind_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queueUnbind_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queueUnbind_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queueUnbind_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queueUnbind_result.class, metaDataMap);
    }

    public queueUnbind_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queueUnbind_result(queueUnbind_result other) {
    }

    public queueUnbind_result deepCopy() {
      return new queueUnbind_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queueUnbind_result)
        return this.equals((queueUnbind_result)that);
      return false;
    }

    public boolean equals(queueUnbind_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(queueUnbind_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      queueUnbind_result typedOther = (queueUnbind_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queueUnbind_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queueUnbind_resultStandardSchemeFactory implements SchemeFactory {
      public queueUnbind_resultStandardScheme getScheme() {
        return new queueUnbind_resultStandardScheme();
      }
    }

    private static class queueUnbind_resultStandardScheme extends StandardScheme<queueUnbind_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queueUnbind_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queueUnbind_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queueUnbind_resultTupleSchemeFactory implements SchemeFactory {
      public queueUnbind_resultTupleScheme getScheme() {
        return new queueUnbind_resultTupleScheme();
      }
    }

    private static class queueUnbind_resultTupleScheme extends TupleScheme<queueUnbind_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queueUnbind_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queueUnbind_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class exchangeAdd_args implements org.apache.thrift.TBase<exchangeAdd_args, exchangeAdd_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exchangeAdd_args");

    private static final org.apache.thrift.protocol.TField EXCHANGE_FIELD_DESC = new org.apache.thrift.protocol.TField("exchange", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new exchangeAdd_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new exchangeAdd_argsTupleSchemeFactory());
    }

    public String exchange; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXCHANGE((short)1, "exchange");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXCHANGE
            return EXCHANGE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXCHANGE, new org.apache.thrift.meta_data.FieldMetaData("exchange", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exchangeAdd_args.class, metaDataMap);
    }

    public exchangeAdd_args() {
    }

    public exchangeAdd_args(
      String exchange)
    {
      this();
      this.exchange = exchange;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exchangeAdd_args(exchangeAdd_args other) {
      if (other.isSetExchange()) {
        this.exchange = other.exchange;
      }
    }

    public exchangeAdd_args deepCopy() {
      return new exchangeAdd_args(this);
    }

    @Override
    public void clear() {
      this.exchange = null;
    }

    public String getExchange() {
      return this.exchange;
    }

    public exchangeAdd_args setExchange(String exchange) {
      this.exchange = exchange;
      return this;
    }

    public void unsetExchange() {
      this.exchange = null;
    }

    /** Returns true if field exchange is set (has been assigned a value) and false otherwise */
    public boolean isSetExchange() {
      return this.exchange != null;
    }

    public void setExchangeIsSet(boolean value) {
      if (!value) {
        this.exchange = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EXCHANGE:
        if (value == null) {
          unsetExchange();
        } else {
          setExchange((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EXCHANGE:
        return getExchange();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EXCHANGE:
        return isSetExchange();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof exchangeAdd_args)
        return this.equals((exchangeAdd_args)that);
      return false;
    }

    public boolean equals(exchangeAdd_args that) {
      if (that == null)
        return false;

      boolean this_present_exchange = true && this.isSetExchange();
      boolean that_present_exchange = true && that.isSetExchange();
      if (this_present_exchange || that_present_exchange) {
        if (!(this_present_exchange && that_present_exchange))
          return false;
        if (!this.exchange.equals(that.exchange))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(exchangeAdd_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      exchangeAdd_args typedOther = (exchangeAdd_args)other;

      lastComparison = Boolean.valueOf(isSetExchange()).compareTo(typedOther.isSetExchange());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExchange()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchange, typedOther.exchange);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("exchangeAdd_args(");
      boolean first = true;

      sb.append("exchange:");
      if (this.exchange == null) {
        sb.append("null");
      } else {
        sb.append(this.exchange);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exchangeAdd_argsStandardSchemeFactory implements SchemeFactory {
      public exchangeAdd_argsStandardScheme getScheme() {
        return new exchangeAdd_argsStandardScheme();
      }
    }

    private static class exchangeAdd_argsStandardScheme extends StandardScheme<exchangeAdd_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, exchangeAdd_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EXCHANGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.exchange = iprot.readString();
                struct.setExchangeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, exchangeAdd_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.exchange != null) {
          oprot.writeFieldBegin(EXCHANGE_FIELD_DESC);
          oprot.writeString(struct.exchange);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exchangeAdd_argsTupleSchemeFactory implements SchemeFactory {
      public exchangeAdd_argsTupleScheme getScheme() {
        return new exchangeAdd_argsTupleScheme();
      }
    }

    private static class exchangeAdd_argsTupleScheme extends TupleScheme<exchangeAdd_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exchangeAdd_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetExchange()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetExchange()) {
          oprot.writeString(struct.exchange);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exchangeAdd_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.exchange = iprot.readString();
          struct.setExchangeIsSet(true);
        }
      }
    }

  }

  public static class exchangeAdd_result implements org.apache.thrift.TBase<exchangeAdd_result, exchangeAdd_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exchangeAdd_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new exchangeAdd_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new exchangeAdd_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exchangeAdd_result.class, metaDataMap);
    }

    public exchangeAdd_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exchangeAdd_result(exchangeAdd_result other) {
    }

    public exchangeAdd_result deepCopy() {
      return new exchangeAdd_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof exchangeAdd_result)
        return this.equals((exchangeAdd_result)that);
      return false;
    }

    public boolean equals(exchangeAdd_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(exchangeAdd_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      exchangeAdd_result typedOther = (exchangeAdd_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("exchangeAdd_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exchangeAdd_resultStandardSchemeFactory implements SchemeFactory {
      public exchangeAdd_resultStandardScheme getScheme() {
        return new exchangeAdd_resultStandardScheme();
      }
    }

    private static class exchangeAdd_resultStandardScheme extends StandardScheme<exchangeAdd_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, exchangeAdd_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, exchangeAdd_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exchangeAdd_resultTupleSchemeFactory implements SchemeFactory {
      public exchangeAdd_resultTupleScheme getScheme() {
        return new exchangeAdd_resultTupleScheme();
      }
    }

    private static class exchangeAdd_resultTupleScheme extends TupleScheme<exchangeAdd_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exchangeAdd_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exchangeAdd_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class exchangeDelete_args implements org.apache.thrift.TBase<exchangeDelete_args, exchangeDelete_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exchangeDelete_args");

    private static final org.apache.thrift.protocol.TField EXCHANGE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("exchangeName", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new exchangeDelete_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new exchangeDelete_argsTupleSchemeFactory());
    }

    public String exchangeName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXCHANGE_NAME((short)1, "exchangeName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXCHANGE_NAME
            return EXCHANGE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXCHANGE_NAME, new org.apache.thrift.meta_data.FieldMetaData("exchangeName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exchangeDelete_args.class, metaDataMap);
    }

    public exchangeDelete_args() {
    }

    public exchangeDelete_args(
      String exchangeName)
    {
      this();
      this.exchangeName = exchangeName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exchangeDelete_args(exchangeDelete_args other) {
      if (other.isSetExchangeName()) {
        this.exchangeName = other.exchangeName;
      }
    }

    public exchangeDelete_args deepCopy() {
      return new exchangeDelete_args(this);
    }

    @Override
    public void clear() {
      this.exchangeName = null;
    }

    public String getExchangeName() {
      return this.exchangeName;
    }

    public exchangeDelete_args setExchangeName(String exchangeName) {
      this.exchangeName = exchangeName;
      return this;
    }

    public void unsetExchangeName() {
      this.exchangeName = null;
    }

    /** Returns true if field exchangeName is set (has been assigned a value) and false otherwise */
    public boolean isSetExchangeName() {
      return this.exchangeName != null;
    }

    public void setExchangeNameIsSet(boolean value) {
      if (!value) {
        this.exchangeName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EXCHANGE_NAME:
        if (value == null) {
          unsetExchangeName();
        } else {
          setExchangeName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EXCHANGE_NAME:
        return getExchangeName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EXCHANGE_NAME:
        return isSetExchangeName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof exchangeDelete_args)
        return this.equals((exchangeDelete_args)that);
      return false;
    }

    public boolean equals(exchangeDelete_args that) {
      if (that == null)
        return false;

      boolean this_present_exchangeName = true && this.isSetExchangeName();
      boolean that_present_exchangeName = true && that.isSetExchangeName();
      if (this_present_exchangeName || that_present_exchangeName) {
        if (!(this_present_exchangeName && that_present_exchangeName))
          return false;
        if (!this.exchangeName.equals(that.exchangeName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(exchangeDelete_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      exchangeDelete_args typedOther = (exchangeDelete_args)other;

      lastComparison = Boolean.valueOf(isSetExchangeName()).compareTo(typedOther.isSetExchangeName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExchangeName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchangeName, typedOther.exchangeName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("exchangeDelete_args(");
      boolean first = true;

      sb.append("exchangeName:");
      if (this.exchangeName == null) {
        sb.append("null");
      } else {
        sb.append(this.exchangeName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exchangeDelete_argsStandardSchemeFactory implements SchemeFactory {
      public exchangeDelete_argsStandardScheme getScheme() {
        return new exchangeDelete_argsStandardScheme();
      }
    }

    private static class exchangeDelete_argsStandardScheme extends StandardScheme<exchangeDelete_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, exchangeDelete_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EXCHANGE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.exchangeName = iprot.readString();
                struct.setExchangeNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, exchangeDelete_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.exchangeName != null) {
          oprot.writeFieldBegin(EXCHANGE_NAME_FIELD_DESC);
          oprot.writeString(struct.exchangeName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exchangeDelete_argsTupleSchemeFactory implements SchemeFactory {
      public exchangeDelete_argsTupleScheme getScheme() {
        return new exchangeDelete_argsTupleScheme();
      }
    }

    private static class exchangeDelete_argsTupleScheme extends TupleScheme<exchangeDelete_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exchangeDelete_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetExchangeName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetExchangeName()) {
          oprot.writeString(struct.exchangeName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exchangeDelete_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.exchangeName = iprot.readString();
          struct.setExchangeNameIsSet(true);
        }
      }
    }

  }

  public static class exchangeDelete_result implements org.apache.thrift.TBase<exchangeDelete_result, exchangeDelete_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exchangeDelete_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new exchangeDelete_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new exchangeDelete_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exchangeDelete_result.class, metaDataMap);
    }

    public exchangeDelete_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exchangeDelete_result(exchangeDelete_result other) {
    }

    public exchangeDelete_result deepCopy() {
      return new exchangeDelete_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof exchangeDelete_result)
        return this.equals((exchangeDelete_result)that);
      return false;
    }

    public boolean equals(exchangeDelete_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(exchangeDelete_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      exchangeDelete_result typedOther = (exchangeDelete_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("exchangeDelete_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exchangeDelete_resultStandardSchemeFactory implements SchemeFactory {
      public exchangeDelete_resultStandardScheme getScheme() {
        return new exchangeDelete_resultStandardScheme();
      }
    }

    private static class exchangeDelete_resultStandardScheme extends StandardScheme<exchangeDelete_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, exchangeDelete_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, exchangeDelete_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exchangeDelete_resultTupleSchemeFactory implements SchemeFactory {
      public exchangeDelete_resultTupleScheme getScheme() {
        return new exchangeDelete_resultTupleScheme();
      }
    }

    private static class exchangeDelete_resultTupleScheme extends TupleScheme<exchangeDelete_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exchangeDelete_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exchangeDelete_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
